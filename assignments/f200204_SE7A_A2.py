{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "109632b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "b24883e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  4,   8,  12,  16,  20,  24,  28,  32,  36,  40],\n",
       "       [ 44,  48,  52,  56,  60,  64,  68,  72,  76,  80],\n",
       "       [ 84,  88,  92,  96, 100, 104, 108, 112, 116, 120],\n",
       "       [124, 128, 132, 136, 140, 144, 148, 152, 156, 160],\n",
       "       [164, 168, 172, 176, 180, 184, 188, 192, 196, 200],\n",
       "       [204, 208, 212, 216, 220, 224, 228, 232, 236, 240],\n",
       "       [244, 248, 252, 256, 260, 264, 268, 272, 276, 280],\n",
       "       [284, 288, 292, 296, 300, 304, 308, 312, 316, 320],\n",
       "       [324, 328, 332, 336, 340, 344, 348, 352, 356, 360],\n",
       "       [364, 368, 372, 376, 380, 384, 388, 392, 396, 400]])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question 1 \n",
    "array1 = np.full((10, 10), 4)\n",
    "array2 = np.arange(1,101,dtype=int).reshape((10,10))\n",
    "array_final = array1 * array2\n",
    "array_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "9d4db317",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10  8  6  4  2]\n",
      " [ 0  2  4  6  8]]\n"
     ]
    }
   ],
   "source": [
    "#Question 2\n",
    "list1 = [[x for x in range(10,0,-1) if x % 2 == 0],[x for x in range(0,10) if x % 2 == 0]]\n",
    "\n",
    "array_org = np.array(list1)\n",
    "print(array_org)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "2924e93d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "original array =  [[10 10  6  4  2]\n",
      " [ 0  2  4  6  8]]\n",
      "Flatten Array =  [10 10  6  4  2  0  2  4  6  8]\n",
      "original array =  [[10 10  6  4  2]\n",
      " [ 0  2  4  6  8]]\n",
      "Ravel Array =  [10 10  6  4  2  0  2  4  6  8]\n"
     ]
    }
   ],
   "source": [
    "#Question 3\n",
    "fltn_array = array_org.flatten()\n",
    "fltn_array[1] = 10\n",
    "print('original array = ', array_org)\n",
    "print('Flatten Array = ', fltn_array)\n",
    "\n",
    "ravel_array = array_org.ravel()\n",
    "ravel_array[1] = 10\n",
    "print('original array = ', array_org)\n",
    "print('Ravel Array = ', ravel_array)\n",
    "\n",
    "#After applying ravel function, original array elements changes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "12ec1e6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   0\n",
      "0  1\n",
      "1  2\n",
      "2  3\n",
      "3  4\n",
      "4  5\n",
      "5  6\n",
      "     0\n",
      "0  1.1\n",
      "1  2.2\n",
      "2  3.3\n",
      "3  4.4\n",
      "4  5.5\n",
      "5  6.6\n",
      "                    0\n",
      "0                 1.1\n",
      "1                 2.2\n",
      "2  3.3000000000000003\n",
      "3                 4.4\n",
      "4                 5.5\n",
      "5                 6.6\n"
     ]
    }
   ],
   "source": [
    "#Question 4 \n",
    "ls_array = np.linspace(1.1, 6.6, num = 6)\n",
    "\n",
    "df = pd.DataFrame(data=ls_array)\n",
    "print(df.astype('int'))\n",
    "print(df.astype('float'))\n",
    "print(df.astype('str'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "0e68d150",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[' 1', ' 2', ' 3', ' 4', ' 5', ' 6', ' 7', ' 8', ' 9'],\n",
       " [' 2', ' 4', ' 6', ' 8', '10', '12', '14', '16', '18'],\n",
       " [' 3', ' 6', ' 9', '12', '15', '18', '21', '24', '27'],\n",
       " [' 4', ' 8', '12', '16', '20', '24', '28', '32', '36'],\n",
       " [' 5', '10', '15', '20', '25', '30', '35', '40', '45'],\n",
       " [' 6', '12', '18', '24', '30', '36', '42', '48', '54'],\n",
       " [' 7', '14', '21', '28', '35', '42', '49', '56', '63'],\n",
       " [' 8', '16', '24', '32', '40', '48', '56', '64', '72'],\n",
       " [' 9', '18', '27', '36', '45', '54', '63', '72', '81']]"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Question 5\n",
    "val = [[x*y for x in range(1, 10)] for y in range(1, 10)]\n",
    "\n",
    "largest_num = max([y for x in val for y in x])\n",
    "largest_len = len(str(largest_num))\n",
    "\n",
    "newlist = [[] for _ in range(9)];\n",
    "\n",
    "for idx,row in enumerate(val):\n",
    "    for char in row:\n",
    "        if(len(str(char)) == largest_len):\n",
    "            value = str(char)\n",
    "        else:\n",
    "            spaces = largest_len - len(str(char))\n",
    "            value = (' '*spaces) + str(char)\n",
    "        newlist[idx].append(value)\n",
    "newlist\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "df2b5860",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    0  1  2  3  4  5  6  7  8 \n",
      "\n",
      "0   1  2  3  4  5  6  7  8  9 \n",
      "1   2  4  6  8 10 12 14 16 18 \n",
      "2   3  6  9 12 15 18 21 24 27 \n",
      "3   4  8 12 16 20 24 28 32 36 \n",
      "4   5 10 15 20 25 30 35 40 45 \n",
      "5   6 12 18 24 30 36 42 48 54 \n",
      "6   7 14 21 28 35 42 49 56 63 \n",
      "7   8 16 24 32 40 48 56 64 72 \n",
      "8   9 18 27 36 45 54 63 72 81 \n"
     ]
    }
   ],
   "source": [
    "#Question 6\n",
    "val = [[x*y for x in range(1, 10)] for y in range(1, 10)]\n",
    "\n",
    "largest_num = max([y for x in val for y in x])\n",
    "largest_len = len(str(largest_num))\n",
    "\n",
    "\n",
    "for idx,row in enumerate(val):\n",
    "    if(idx==0):\n",
    "        print('   ', end='')\n",
    "        for x in range(len(max(val))):\n",
    "            spaces = 0\n",
    "            if(len(str(x)) != largest_len):\n",
    "                spaces = largest_len - len(str(x))\n",
    "            print(' '*spaces, end='')\n",
    "            print(x, end=' ')\n",
    "        print(end='\\n\\n')\n",
    "    print(idx, end='  ')\n",
    "    for char in row:\n",
    "        if(len(str(char)) == largest_len):\n",
    "            value = char\n",
    "        else:\n",
    "            spaces = largest_len - len(str(char))\n",
    "            value = (' '*spaces) + str(char)\n",
    "        print(value, end=' ')\n",
    "    print(end='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "b61fac73",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Let's Start the Game..!!!\n",
      "\n",
      "[[' ' ' ' ' ']\n",
      " [' ' ' ' ' ']\n",
      " [' ' ' ' ' ']]\n",
      "\n",
      "Player 1's Turn\n",
      "Enter your move = 12\n",
      "[[' ' ' ' ' ']\n",
      " [' ' ' ' 'X']\n",
      " [' ' ' ' ' ']]\n",
      "\n",
      "Player 2's Turn\n",
      "Enter your move = 12\n",
      "Oops, wrong input format. Enter again.\n",
      "Enter your move = 11\n",
      "[[' ' ' ' ' ']\n",
      " [' ' 'O' 'X']\n",
      " [' ' ' ' ' ']]\n",
      "\n",
      "Player 1's Turn\n",
      "Enter your move = 21\n",
      "[[' ' ' ' ' ']\n",
      " [' ' 'O' 'X']\n",
      " [' ' 'X' ' ']]\n",
      "\n",
      "Player 2's Turn\n",
      "Enter your move = 22\n",
      "[[' ' ' ' ' ']\n",
      " [' ' 'O' 'X']\n",
      " [' ' 'X' 'O']]\n",
      "\n",
      "Player 1's Turn\n",
      "Enter your move = 10\n",
      "[[' ' ' ' ' ']\n",
      " ['X' 'O' 'X']\n",
      " [' ' 'X' 'O']]\n",
      "\n",
      "Player 2's Turn\n",
      "Enter your move = 00\n",
      "[['O' ' ' ' ']\n",
      " ['X' 'O' 'X']\n",
      " [' ' 'X' 'O']]\n",
      "\n",
      "Player O wins!\n"
     ]
    }
   ],
   "source": [
    "#Question 7\n",
    "\n",
    "input_array = ['01','00','02','10','11','12','20','21','22']\n",
    "grid = np.full((3, 3), ' ')\n",
    "print(\"Let's Start the Game..!!!\", end='\\n\\n')\n",
    "print(grid, end='\\n\\n')\n",
    "\n",
    "player = 1\n",
    "draw = True\n",
    "def check_winner(grid):\n",
    "    # Check rows\n",
    "    for row in grid:\n",
    "        if row[0] == row[1] == row[2] != ' ':\n",
    "            return row[0]\n",
    "\n",
    "    # Check columns\n",
    "    for col in range(3):\n",
    "        if grid[0][col] == grid[1][col] == grid[2][col] != ' ':\n",
    "            return grid[0][col]\n",
    "\n",
    "    # Check diagonals\n",
    "    if grid[0][0] == grid[1][1] == grid[2][2] != ' ':\n",
    "        return grid[0][0]\n",
    "    if grid[0][2] == grid[1][1] == grid[2][0] != ' ':\n",
    "        return grid[0][2]\n",
    "\n",
    "    return None\n",
    "\n",
    "for x in range(9):\n",
    "    if x % 2 == 0:\n",
    "        print('Player 1\\'s Turn')\n",
    "    else:\n",
    "        print('Player 2\\'s Turn')\n",
    "\n",
    "    while True:\n",
    "        val = input('Enter your move = ')\n",
    "        if val in input_array:\n",
    "            input_array.remove(val)\n",
    "            row = int(val[0])\n",
    "            col = int(val[1])\n",
    "            if grid[row][col] == ' ':\n",
    "                if player == 1:\n",
    "                    grid[row][col] = 'X'\n",
    "                else:\n",
    "                    grid[row][col] = 'O'\n",
    "                break\n",
    "            else:\n",
    "                print('This position is already taken. Try again.')\n",
    "        else:\n",
    "            print('Oops, wrong input format. Enter again.')\n",
    "\n",
    "    print(grid, end='\\n\\n')\n",
    "    winner = check_winner(grid)\n",
    "    if x > 3 and winner:\n",
    "        print(f'Player {winner} wins!')\n",
    "        draw = False\n",
    "        break\n",
    "    player = 3 - player\n",
    "if(draw):\n",
    "    print(\"It\\'s a Draw....!!!!'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "52448fc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Let's Start the Game..!!!\n",
      "\n",
      "[[' ' ' ' ' ']\n",
      " [' ' ' ' ' ']\n",
      " [' ' ' ' ' ']]\n",
      "\n",
      "You want to play as player 1 or 2: 1\n",
      "Player's Turn\n",
      "Enter your move (row and column, e.g., 01) = 12\n",
      "[[' ' ' ' ' ']\n",
      " [' ' ' ' 'X']\n",
      " [' ' ' ' ' ']]\n",
      "\n",
      "Computer's Turn\n",
      "[[' ' 'O' ' ']\n",
      " [' ' ' ' 'X']\n",
      " [' ' ' ' ' ']]\n",
      "\n",
      "Player's Turn\n",
      "Enter your move (row and column, e.g., 01) = 01\n",
      "Oops, wrong input format. Enter again.\n",
      "Enter your move (row and column, e.g., 01) = 11\n",
      "[[' ' 'O' ' ']\n",
      " [' ' 'X' 'X']\n",
      " [' ' ' ' ' ']]\n",
      "\n",
      "Computer's Turn\n",
      "[[' ' 'O' 'O']\n",
      " [' ' 'X' 'X']\n",
      " [' ' ' ' ' ']]\n",
      "\n",
      "Player's Turn\n",
      "Enter your move (row and column, e.g., 01) = 10\n",
      "[[' ' 'O' 'O']\n",
      " ['X' 'X' 'X']\n",
      " [' ' ' ' ' ']]\n",
      "\n",
      "You win!\n"
     ]
    }
   ],
   "source": [
    "#Question 8\n",
    "import random\n",
    "\n",
    "input_array = ['01','00','02','10','11','12','20','21','22']\n",
    "grid = np.full((3, 3), ' ')\n",
    "print(\"Let's Start the Game..!!!\", end='\\n\\n')\n",
    "print(grid, end='\\n\\n')\n",
    "\n",
    "player = 1\n",
    "draw = True;\n",
    "while True:\n",
    "    turn = input('You want to play as player 1 or 2: ')\n",
    "    if(turn =='1' or turn =='2'):\n",
    "        break\n",
    "    print('Worng input, Enter 1 or 2...!!!')\n",
    "\n",
    "num = 4\n",
    "if(turn == 1):\n",
    "    num=5\n",
    "    \n",
    "def check_winner(grid):\n",
    "    for row in grid:\n",
    "        if row[0] == row[1] == row[2] != ' ':\n",
    "            return row[0]\n",
    "\n",
    "    for col in range(3):\n",
    "        if grid[0][col] == grid[1][col] == grid[2][col] != ' ':\n",
    "            return grid[0][col]\n",
    "\n",
    "    if grid[0][0] == grid[1][1] == grid[2][2] != ' ':\n",
    "        return grid[0][0]\n",
    "    if grid[0][2] == grid[1][1] == grid[2][0] != ' ':\n",
    "        return grid[0][2]\n",
    "\n",
    "    return None\n",
    "\n",
    "for x in range(num+1):\n",
    "    \n",
    "    #Player's Turn\n",
    "    if((turn == '2' and x!=0) or (turn == '1')):\n",
    "        print('Player\\'s Turn')\n",
    "        while True:\n",
    "            val = input('Enter your move (row and column, e.g., 01) = ')\n",
    "            if val in input_array:\n",
    "                input_array.remove(val)\n",
    "                row = int(val[0])\n",
    "                col = int(val[1])\n",
    "                if grid[row][col] == ' ':\n",
    "                    grid[row][col] = 'X'\n",
    "                    print(grid, end='\\n\\n')\n",
    "                    winner = check_winner(grid)\n",
    "                    break\n",
    "                else:\n",
    "                    print('This position is already taken. Try again.')\n",
    "            else:\n",
    "                print('Oops, wrong input format. Enter again.')   \n",
    "        if winner:   \n",
    "            print(f'You win!')\n",
    "            draw= False\n",
    "            break\n",
    "        \n",
    "    if((turn=='1' and x!=4)or(turn == '2')):\n",
    "    #Computer's turn\n",
    "        print('Computer\\'s Turn')\n",
    "        while True:\n",
    "            row = random.randint(0, 2)\n",
    "            col = random.randint(0, 2)\n",
    "            if grid[row][col] == ' ':\n",
    "                temp = str(row)+str(col)\n",
    "                input_array.remove(temp)\n",
    "                grid[row][col] = 'O'\n",
    "                print(grid, end='\\n\\n')\n",
    "                winner = check_winner(grid)\n",
    "                break\n",
    "        if winner:\n",
    "            print(f'Computer wins!')\n",
    "            draw = False\n",
    "            break\n",
    "if(draw):\n",
    "    print(\"It\\'s a Draw....!!!!'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c14e3dd0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Let's Start the 3D Tic-Tac-Toe Game..!!!\n",
      "\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]]\n",
      "\n",
      "You want to play as player 1 or 2: 1\n",
      "Player's Turn\n",
      "Enter your move (layer, row, and column, e.g., 012) = 123\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]]\n",
      "Computer's Turn\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]]\n",
      "Player's Turn\n",
      "Enter your move (layer, row, and column, e.g., 012) = 122\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' 'X' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]]\n",
      "Computer's Turn\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  ['O' ' ' 'X' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]]\n",
      "Player's Turn\n",
      "Enter your move (layer, row, and column, e.g., 012) = 231\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  ['O' ' ' 'X' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' 'X' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]]\n",
      "Computer's Turn\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']\n",
      "  ['O' ' ' 'X' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' 'X' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]]\n",
      "Player's Turn\n",
      "Enter your move (layer, row, and column, e.g., 012) = 221\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']\n",
      "  ['O' ' ' 'X' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' 'X' ' ' ' ']\n",
      "  [' ' 'X' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]]\n",
      "Computer's Turn\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']\n",
      "  ['O' ' ' 'X' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' 'X' ' ' ' ']\n",
      "  [' ' 'X' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']]]\n",
      "Player's Turn\n",
      "Enter your move (layer, row, and column, e.g., 012) = 211\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']\n",
      "  ['O' ' ' 'X' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' 'X' ' ' ' ']\n",
      "  [' ' 'X' ' ' ' ']\n",
      "  [' ' 'X' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']]]\n",
      "Computer's Turn\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']\n",
      "  ['O' ' ' 'X' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' 'X' ' ' ' ']\n",
      "  [' ' 'X' ' ' 'O']\n",
      "  [' ' 'X' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']]]\n",
      "Player's Turn\n",
      "Enter your move (layer, row, and column, e.g., 012) = 201\n",
      "[[[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']\n",
      "  ['O' ' ' 'X' 'X']\n",
      "  [' ' ' ' ' ' ' ']]\n",
      "\n",
      " [[' ' 'X' ' ' ' ']\n",
      "  [' ' 'X' ' ' ' ']\n",
      "  [' ' 'X' ' ' 'O']\n",
      "  [' ' 'X' 'O' ' ']]\n",
      "\n",
      " [[' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' ' ']\n",
      "  [' ' ' ' ' ' 'O']]]\n",
      "Player wins!\n"
     ]
    }
   ],
   "source": [
    "#Question 9\n",
    "import re\n",
    "grid = np.full((4, 4, 4), ' ')\n",
    "print(\"Let's Start the 3D Tic-Tac-Toe Game..!!!\", end='\\n\\n')\n",
    "print(grid, end='\\n\\n')\n",
    "\n",
    "player = 1\n",
    "draw = True\n",
    "\n",
    "while True:\n",
    "    turn = input('You want to play as player 1 or 2: ')\n",
    "    if turn in ('1', '2'):\n",
    "        break\n",
    "    print('Wrong input, Enter 1 or 2...!!!')\n",
    "\n",
    "def check_winner(grid):\n",
    "    for layer in grid:\n",
    "        for row in layer:\n",
    "            if row[0] == row[1] == row[2] == row[3] != ' ':\n",
    "                return row[0]\n",
    "\n",
    "        for col in range(3):\n",
    "            if layer[0][col] == layer[1][col] == layer[2][col] == layer[3][col] != ' ':\n",
    "                return layer[0][col]\n",
    "\n",
    "        if layer[0][0] == layer[1][1] == layer[2][2] == layer[3][3] != ' ':\n",
    "            return layer[0][0]\n",
    "        if layer[0][3] == layer[1][2] == layer[2][1] == layer[3][0] != ' ':\n",
    "            return layer[0][3]\n",
    "\n",
    "    if grid[0][0][0] == grid[1][1][1] == grid[2][2][2] == grid[3][3][3] != ' ':\n",
    "        return grid[0][0][0]\n",
    "    if grid[0][0][3] == grid[1][1][2] == grid[2][2][1] == grid[3][3][0] != ' ':\n",
    "        return grid[0][0][3]\n",
    "    if grid[0][3][0] == grid[1][2][1] == grid[2][1][2] == grid[3][0][3] != ' ':\n",
    "        return grid[0][3][0]\n",
    "    if grid[0][3][3] == grid[1][2][2] == grid[2][1][1] == grid[3][0][0] != ' ':\n",
    "        return grid[0][3][3]\n",
    "\n",
    "    return None\n",
    "\n",
    "for x in range(32): \n",
    "    \n",
    "    if (turn == '2' and x != 0) or (turn == '1'):\n",
    "        print('Player\\'s Turn')\n",
    "        while True:\n",
    "            val = input('Enter your move (layer, row, and column, e.g., 012) = ')\n",
    "            if re.search('[0-3]{3}', val):\n",
    "                layer = int(val[0])\n",
    "                row = int(val[1])\n",
    "                col = int(val[2])\n",
    "                if grid[layer][row][col] == ' ':\n",
    "                    grid[layer][row][col] = 'X'\n",
    "                    print(grid)\n",
    "                    winner = check_winner(grid)\n",
    "                    break\n",
    "                else:\n",
    "                    print('This position is already taken. Try again.')\n",
    "            else:\n",
    "                print('Oops, wrong input format. Enter again.')\n",
    "        if winner:\n",
    "            print(f'Player wins!')\n",
    "            draw = False\n",
    "            break\n",
    "\n",
    "    if (turn == '2' and x != 31) or (turn == '1'):\n",
    "        print('Computer\\'s Turn')\n",
    "        while True:\n",
    "            layer = random.randint(0, 3)\n",
    "            row = random.randint(0, 3)\n",
    "            col = random.randint(0, 3)\n",
    "            if grid[layer][row][col] == ' ':\n",
    "                grid[layer][row][col] = 'O'\n",
    "                print(grid)\n",
    "                winner = check_winner(grid)\n",
    "                break\n",
    "        if winner:\n",
    "            print(f'Computer wins!')\n",
    "            draw = False\n",
    "            break\n",
    "\n",
    "if draw:\n",
    "    print(\"It\\'s a Draw....!!!!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1159040f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Array 3 with horizontal stacking [[0 2 1 3]\n",
      " [4 6 5 7]]\n",
      "Array 4 with vertical spliting for top values [[0 2 1 3]]\n",
      "Array 5 with vertical spliting for bottom values [[4 6 5 7]]\n",
      "[[0 1 2 3 4 5 6 7]]\n",
      "[[ 0  1  2  3  4  5  6  7]\n",
      " [ 0 10 20 30 40 50 60 70]]\n"
     ]
    }
   ],
   "source": [
    "# Quesion 10\n",
    "array1 = np.array([[0, 2], [4, 6]])\n",
    "array2 = np.array([[1, 3], [5, 7]])\n",
    "\n",
    "#(A)\n",
    "array3 = np.hstack((array1,array2))\n",
    "print('Array 3 with horizontal stacking', array3)\n",
    "\n",
    "#(B)\n",
    "array4, array5 = np.vsplit(array3, 2)\n",
    "print('Array 4 with vertical spliting for top values', array4)\n",
    "print('Array 5 with vertical spliting for bottom values', array5)\n",
    "\n",
    "#(C)\n",
    "array6 = np.hstack((np.sort(array4), np.sort(array5)))\n",
    "print(array6)\n",
    "\n",
    "#(D)\n",
    "array7 = np.vstack((array6, array6*10))\n",
    "print(array7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "27bd0893",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 0 0 0 0 1 1 1 1 1 1 0 0 0 1 0 0 1 0 0 1 1 1 1 0 0 1 1 0 0 0 0 1 1 0 1\n",
      " 1 1 1 0 1 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 0 0 1 1 1\n",
      " 0 1 0 0 0 0 1 1 1 0 1 1 0 1 1 1 1 1 0 0 0 0 0 1 0]\n",
      "[50 49]\n",
      "50\n",
      "49\n"
     ]
    }
   ],
   "source": [
    "#Question 11\n",
    "votes = np.random.randint(2, size=99)\n",
    "print(votes)\n",
    "\n",
    "print(np.bincount(votes))\n",
    "candidate1,candidate2 = np.bincount(votes)\n",
    "\n",
    "print(candidate1)\n",
    "print(candidate2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a9d90f46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Array 1:\n",
      "Median: 3.5\n",
      "Mode: 1\n",
      "Array 2:\n",
      "Median: 2.5\n",
      "Mode: 2\n",
      "Array 3:\n",
      "Median: 3\n",
      "Mode: 4\n"
     ]
    }
   ],
   "source": [
    "#Question 12\n",
    "array1 = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "array2 = np.array([[1, 2, 2], [3, 3, 4]])\n",
    "array3 = np.array([1, 2, 2, 3, 4, 4, 4])\n",
    "\n",
    "def median_func(arr):\n",
    "    flattened_arr = arr.flatten()\n",
    "    sorted_arr = np.sort(flattened_arr)\n",
    "    n = len(sorted_arr)\n",
    "    if n % 2 == 0:\n",
    "        mid1 = sorted_arr[n // 2 - 1]\n",
    "        mid2 = sorted_arr[n // 2]\n",
    "        median_value = (mid1 + mid2) / 2\n",
    "    else:\n",
    "        median_value = sorted_arr[n // 2]\n",
    "    return median_value\n",
    "\n",
    "def mode_func(arr):\n",
    "    return np.argmax(np.bincount(arr.flatten()))\n",
    "\n",
    "print(\"Array 1:\")\n",
    "print(\"Median:\", median_func(array1))\n",
    "print(\"Mode:\", mode_func(array1))\n",
    "\n",
    "print(\"Array 2:\")\n",
    "print(\"Median:\", median_func(array2))\n",
    "print(\"Mode:\", mode_func(array2))\n",
    "\n",
    "print(\"Array 3:\")\n",
    "print(\"Median:\", median_func(array3))\n",
    "print(\"Mode:\", mode_func(array3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "3e88b000",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Array 1:\n",
      "Median (row-wise): [1.5 4.5]\n",
      "Median (column-wise): [1.5 4.5]\n",
      "Mode (row-wise): 1\n",
      "Mode (column-wise): 1\n",
      "Array 2:\n",
      "Median (row-wise): [1.5 3. ]\n",
      "Median (column-wise): [1.5 3. ]\n",
      "Mode (row-wise): 2\n",
      "Mode (column-wise): 2\n",
      "Array 3:\n",
      "Median (row-wise): 3\n",
      "Median (column-wise): [1.5 3. ]\n",
      "Mode (row-wise): 4\n",
      "Mode (column-wise): 4\n"
     ]
    }
   ],
   "source": [
    "#Question 13\n",
    "def median_func(arr, axis=None):\n",
    "    sorted_arr = np.sort(arr, axis=axis)\n",
    "    n = len(sorted_arr)\n",
    "    if n % 2 == 0:\n",
    "        mid1 = sorted_arr[..., n // 2 - 1]\n",
    "        mid2 = sorted_arr[..., n // 2]\n",
    "        median_value = (mid1 + mid2) / 2\n",
    "    else:\n",
    "        median_value = sorted_arr[..., n // 2]\n",
    "    return median_value\n",
    "\n",
    "def mode_func(arr, axis=None):\n",
    "    flattened_arr = arr.flatten()\n",
    "    return np.argmax(np.bincount(flattened_arr))\n",
    "\n",
    "array1 = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "array2 = np.array([[1, 2, 2], [3, 3, 4]])\n",
    "array3 = np.array([1, 2, 2, 3, 4, 4, 4])\n",
    "\n",
    "print(\"Array 1:\")\n",
    "print(\"Median (row-wise):\", median_func(array1, axis=1))\n",
    "print(\"Median (column-wise):\", median_func(array1, axis=0))\n",
    "print(\"Mode (row-wise):\", mode_func(array1, axis=0))\n",
    "print(\"Mode (column-wise):\", mode_func(array1, axis=1))\n",
    "\n",
    "\n",
    "print(\"Array 2:\")\n",
    "print(\"Median (row-wise):\", median_func(array2, axis=1))\n",
    "print(\"Median (column-wise):\", median_func(array2, axis=0))\n",
    "print(\"Mode (row-wise):\", mode_func(array2, axis=0))\n",
    "print(\"Mode (column-wise):\", mode_func(array2, axis=1))\n",
    "\n",
    "\n",
    "print(\"Array 3:\")\n",
    "print(\"Median (row-wise):\", median_func(array3, axis=0))\n",
    "print(\"Median (column-wise):\", median_func(array2, axis=1))\n",
    "print(\"Mode (row-wise):\", mode_func(array3, axis=0))\n",
    "print(\"Mode (column-wise):\", mode_func(array3, axis=1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "49ecbb6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Move  1\n",
      "[[0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 1 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]]\n",
      "Move  2\n",
      "[[0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 1 0 0 0]\n",
      " [0 0 0 0 0 0 2 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]]\n",
      "Move  3\n",
      "[[0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 1 0 0 0]\n",
      " [0 0 0 0 0 0 2 0]\n",
      " [0 0 0 0 3 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]]\n",
      "Move  4\n",
      "[[0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 1 0 0 0]\n",
      " [0 0 4 0 0 0 2 0]\n",
      " [0 0 0 0 3 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]]\n",
      "Move  5\n",
      "[[0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [5 0 0 0 1 0 0 0]\n",
      " [0 0 4 0 0 0 2 0]\n",
      " [0 0 0 0 3 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]]\n",
      "Move  6\n",
      "[[0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 6 0 0 0 0 0]\n",
      " [5 0 0 0 1 0 0 0]\n",
      " [0 0 4 0 0 0 2 0]\n",
      " [0 0 0 0 3 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]]\n",
      "Move  7\n",
      "[[0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 7 0 0 0]\n",
      " [0 0 6 0 0 0 0 0]\n",
      " [5 0 0 0 1 0 0 0]\n",
      " [0 0 4 0 0 0 2 0]\n",
      " [0 0 0 0 3 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]]\n",
      "Move  8\n",
      "[[0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 7 0 0 0]\n",
      " [0 0 6 0 0 0 8 0]\n",
      " [5 0 0 0 1 0 0 0]\n",
      " [0 0 4 0 0 0 2 0]\n",
      " [0 0 0 0 3 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]]\n",
      "Move  9\n",
      "[[0 0 0 0 0 9 0 0]\n",
      " [0 0 0 0 7 0 0 0]\n",
      " [0 0 6 0 0 0 8 0]\n",
      " [5 0 0 0 1 0 0 0]\n",
      " [0 0 4 0 0 0 2 0]\n",
      " [0 0 0 0 3 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0]]\n",
      "Move  10\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0  0  8  0]\n",
      " [ 5  0  0  0  1  0  0  0]\n",
      " [ 0  0  4  0  0  0  2  0]\n",
      " [ 0  0  0  0  3  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]]\n",
      "Move  11\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0  0  1  0  0  0]\n",
      " [ 0  0  4  0  0  0  2  0]\n",
      " [ 0  0  0  0  3  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]]\n",
      "Move  12\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [ 0  0  4  0  0  0  2  0]\n",
      " [ 0  0  0  0  3  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]]\n",
      "Move  13\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [ 0  0  4  0  0 13  2  0]\n",
      " [ 0  0  0  0  3  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]]\n",
      "Move  14\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [ 0  0  4  0  0 13  2  0]\n",
      " [ 0  0  0 14  3  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]]\n",
      "Move  15\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [ 0  0  4  0  0 13  2  0]\n",
      " [ 0  0  0 14  3  0  0  0]\n",
      " [ 0  0  0  0  0 15  0  0]\n",
      " [ 0  0  0  0  0  0  0  0]]\n",
      "Move  16\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [ 0  0  4  0  0 13  2  0]\n",
      " [ 0  0  0 14  3  0  0  0]\n",
      " [ 0  0  0  0  0 15  0  0]\n",
      " [ 0  0  0 16  0  0  0  0]]\n",
      "Move  17\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [ 0  0  4  0  0 13  2  0]\n",
      " [ 0  0  0 14  3  0  0  0]\n",
      " [ 0 17  0  0  0 15  0  0]\n",
      " [ 0  0  0 16  0  0  0  0]]\n",
      "Move  18\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [18  0  4  0  0 13  2  0]\n",
      " [ 0  0  0 14  3  0  0  0]\n",
      " [ 0 17  0  0  0 15  0  0]\n",
      " [ 0  0  0 16  0  0  0  0]]\n",
      "Move  19\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [18  0  4  0  0 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [ 0 17  0  0  0 15  0  0]\n",
      " [ 0  0  0 16  0  0  0  0]]\n",
      "Move  20\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [18  0  4  0  0 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [ 0 17  0  0 20 15  0  0]\n",
      " [ 0  0  0 16  0  0  0  0]]\n",
      "Move  21\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [18  0  4  0  0 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [ 0 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  22\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [18  0  4  0  0 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  23\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [ 0  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [18 23  4  0  0 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  24\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [24  0  6  0  0 11  8  0]\n",
      " [ 5  0  0 12  1  0  0  0]\n",
      " [18 23  4  0  0 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  25\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [24  0  6  0  0 11  8  0]\n",
      " [ 5  0 25 12  1  0  0  0]\n",
      " [18 23  4  0  0 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  26\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [24  0  6  0  0 11  8  0]\n",
      " [ 5  0 25 12  1  0  0  0]\n",
      " [18 23  4  0 26 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  27\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [24  0  6  0  0 11  8  0]\n",
      " [ 5  0 25 12  1  0 27  0]\n",
      " [18 23  4  0 26 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  28\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0  0  0]\n",
      " [24  0  6  0 28 11  8  0]\n",
      " [ 5  0 25 12  1  0 27  0]\n",
      " [18 23  4  0 26 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  29\n",
      "[[ 0  0  0  0  0  9  0  0]\n",
      " [ 0  0  0 10  7  0 29  0]\n",
      " [24  0  6  0 28 11  8  0]\n",
      " [ 5  0 25 12  1  0 27  0]\n",
      " [18 23  4  0 26 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  30\n",
      "[[ 0  0  0  0 30  9  0  0]\n",
      " [ 0  0  0 10  7  0 29  0]\n",
      " [24  0  6  0 28 11  8  0]\n",
      " [ 5  0 25 12  1  0 27  0]\n",
      " [18 23  4  0 26 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  31\n",
      "[[ 0  0  0  0 30  9  0  0]\n",
      " [ 0  0 31 10  7  0 29  0]\n",
      " [24  0  6  0 28 11  8  0]\n",
      " [ 5  0 25 12  1  0 27  0]\n",
      " [18 23  4  0 26 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  32\n",
      "[[ 0  0  0  0 30  9  0  0]\n",
      " [ 0  0 31 10  7  0 29  0]\n",
      " [24  0  6  0 28 11  8  0]\n",
      " [ 5 32 25 12  1  0 27  0]\n",
      " [18 23  4  0 26 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  33\n",
      "[[ 0  0  0  0 30  9  0  0]\n",
      " [ 0  0 31 10  7  0 29  0]\n",
      " [24  0  6  0 28 11  8  0]\n",
      " [ 5 32 25 12  1  0 27  0]\n",
      " [18 23  4 33 26 13  2  0]\n",
      " [ 0  0 19 14  3  0  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  34\n",
      "[[ 0  0  0  0 30  9  0  0]\n",
      " [ 0  0 31 10  7  0 29  0]\n",
      " [24  0  6  0 28 11  8  0]\n",
      " [ 5 32 25 12  1  0 27  0]\n",
      " [18 23  4 33 26 13  2  0]\n",
      " [ 0  0 19 14  3 34  0  0]\n",
      " [22 17  0  0 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n",
      "Move  35\n",
      "[[ 0  0  0  0 30  9  0  0]\n",
      " [ 0  0 31 10  7  0 29  0]\n",
      " [24  0  6  0 28 11  8  0]\n",
      " [ 5 32 25 12  1  0 27  0]\n",
      " [18 23  4 33 26 13  2  0]\n",
      " [ 0  0 19 14  3 34  0  0]\n",
      " [22 17  0 35 20 15  0  0]\n",
      " [ 0  0 21 16  0  0  0  0]]\n"
     ]
    }
   ],
   "source": [
    "#Question 14\n",
    "#(A)\n",
    "#Done on Paper, Added to the report\n",
    "#(B)\n",
    "squares = [x+1 for x in range(64)]\n",
    "board = np.zeros((8,8), dtype=int)\n",
    "current_row = 3\n",
    "current_column = 4\n",
    "x=1;\n",
    "while True:\n",
    "    temp = str(current_column)+str(current_row)\n",
    "    if(int(temp) in squares):\n",
    "        squares.remove(int(temp))\n",
    "        board[current_row][current_column] = x\n",
    "        \n",
    "        if current_column + 2 < 8 and current_row + 1 < 8 and (int(str(current_column + 2) + str(current_row + 1)) in squares):\n",
    "            current_column +=2\n",
    "            current_row +=1\n",
    "        \n",
    "        elif current_column +2 < 8 and current_row - 1 >= 0 and (int(str(current_column + 2) + str(current_row - 1)) in squares):\n",
    "            current_column +=2\n",
    "            current_row -=1\n",
    "        \n",
    "        elif current_column - 2 >= 0 and current_row - 1 >= 0 and (int(str(current_column - 2) + str(current_row - 1)) in squares):\n",
    "            current_column -=2\n",
    "            current_row -=1\n",
    "        \n",
    "        elif current_column -2 >= 0 and current_row + 1 < 8 and (int(str(current_column - 2) + str(current_row + 1)) in squares):\n",
    "            current_column -=2\n",
    "            current_row +=1\n",
    "        \n",
    "        elif current_column -1 >= 0 and current_row - 2 >= 0 and (int(str(current_column -1) + str(current_row - 2)) in squares):\n",
    "            current_column -=1\n",
    "            current_row -=2\n",
    "        \n",
    "        elif current_column -1 >= 0 and current_row + 2 < 8 and (int(str(current_column - 1) + str(current_row + 2)) in squares):\n",
    "            current_column -=1\n",
    "            current_row +=2\n",
    "        \n",
    "        elif current_column +1 < 8 and current_row + 2 < 8 and (int(str(current_column + 1) + str(current_row + 2)) in squares):\n",
    "            current_column +=1\n",
    "            current_row +=2\n",
    "\n",
    "        elif current_column +1 < 8 and current_row - 2 >= 0 and (int(str(current_column + 1) + str(current_row - 2)) in squares):\n",
    "            current_column +=1\n",
    "            current_row -=2\n",
    "        else:\n",
    "            break\n",
    "        \n",
    "        print('Move ',x)\n",
    "        print(board)\n",
    "        x+=1\n",
    "\n",
    "#(C) NA\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f39bfa3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
